{"version":3,"sources":["Artist.js","Tracks.js","Search.js","App.js","serviceWorker.js","index.js"],"names":["Artist","_ref","artist","images","name","followers","genres","react_default","a","createElement","total","join","className","src","url","alt","Tracks","state","playing","audio","playingPreviewUrl","playAudio","previewUrl","Audio","_this","pause","setState","play","trackIcon","track","preview_url","_this2","this","tracks","props","map","id","album","key","onClick","Component","Search","artistQuery","handleChange","e","console","log","target","value","handleKeyPress","searchArtist","type","onChange","onKeyPress","API_ADDRESS","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","fetch","concat","then","response","json","artists","items","catch","error","alert","message","Search_Search","src_Artist_0","src_Tracks_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.51f3e053.chunk.js","sourcesContent":["import React from 'react'\nimport './Artist.css'\n\n\nconst Artist = ({ artist }) => {\n    if(!artist) return null;\n    const {images, name, followers, genres } = artist;\n\n    return(\n        <div>\n            <h3>{name}</h3>\n            <p>{followers.total} followers</p>\n            <p>{genres.join(', ')}</p>\n            <img className=\"artist-image\" src={images[0] && images[0].url} alt={name}/>\n        </div>\n    )\n}\n\nexport default Artist","import React, { Component } from 'react'\nimport './Tracks.css'\n\nclass Tracks extends Component {\n    state = {playing: false, audio: null, playingPreviewUrl: null};\n\n    playAudio = previewUrl => () => {\n        const audio = new Audio(previewUrl);\n\n        if(!this.state.playing){\n            audio.play();\n            this.setState({playing: true, audio:audio, playingPreviewUrl: previewUrl})\n        }else{\n            this.state.audio.pause();\n             if(this.state.playingPreviewUrl === previewUrl){\n                 this.setState({playing:false})\n                }else{\n                    audio.play()\n                    this.setState({ audio, playingPreviewUrl: previewUrl })\n             }\n        }\n    }\n\n    trackIcon = track => {\n        if(!track.preview_url){\n            return <span>N/A</span>\n        }\n\n        if( this.state.playing && this.state.playingPreviewUrl === track.preview_url ){\n            return <span>|  |</span>\n        }\n\n        return <span>&#9654;</span>\n    }\n\n    render() {\n        const {tracks} = this.props\n        return (\n            <div>\n                {\n                    tracks.map(track => {\n                        const {id, name, album, preview_url} = track;\n                        return (\n                            <div className=\"track-div\" key={id} onClick={this.playAudio(preview_url)}>\n                                <img src={album.images[0].url} alt={name} />\n                                <p>{name}</p>\n                                <p className=\"track-icon\">{this.trackIcon(track)}</p>\n                            </div>\n                        )\n                    })\n                }\n            </div>\n        )\n    }\n}\n\nexport default Tracks;","import React, { Component } from 'react'\n\nexport default class Search extends Component {\n    state = {artistQuery: ''};\n\n    handleChange = (e) => {\n        console.log('event', e.target.value);\n        this.setState({artistQuery: e.target.value})\n    }\n\n    handleKeyPress = e => {\n        if(e.key === 'Enter'){\n            this.searchArtist();\n        }\n    }\n\n    searchArtist = () => {\n        this.props.searchArtist(this.state.artistQuery)\n    }\n\n    render() {\n        return (\n            <div>\n                <input type=\"text\" onChange={this.handleChange} onKeyPress={this.handleKeyPress} />\n                <button onClick={this.searchArtist}>Search</button>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport Artist from './Artist'\nimport Tracks from './Tracks'\nimport Search from './Search'\nimport './App.css';\n\n\nconst API_ADDRESS = 'https://spotify-api-wrapper.appspot.com';\n\nclass App extends Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      artist: null,\n      tracks: []\n    }\n  }\n\n  componentDidMount(){\n    this.searchArtist('lupe');\n  }\n\n  searchArtist = (artistQuery) => {\n    console.log('this.state', this.state)\n\n    fetch(`${API_ADDRESS}/artist/${artistQuery}`) \n      .then( response => response.json() )\n      .then( json => {\n      \n      console.log('json', json) \n    \n      if(json.artists.total > 0){\n        const artist = json.artists.items[0]\n        console.log('artist', artist)\n        this.setState({artist});\n\n        fetch(`${API_ADDRESS}/artist/${artist.id}/top-tracks`)\n        .then(response =>  response.json())\n        .then(json => this.setState({tracks: json.tracks }) )\n        .catch(error => alert(error.message));\n      }\n\n    \n    })\n    .catch(error => alert(error.message));\n}\n  \n\n\n  render(){\n    return (\n      <div className=\"App\">\n        <h1>Music Master</h1>\n        <p className=\"text-muted text-caption\">Search your favorite artist</p>\n        <Search searchArtist = {this.searchArtist} />\n        <Artist artist = {this.state.artist} />\n        <h4> {this.state.artist && 'Albums by ' + this.state.artist.name + ': Click image to preview track.'}</h4>\n        <Tracks tracks = {this.state.tracks} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}